---
title: "Models"
format:
  html:
    page-layout: full
    code-fold: show
    code-copy: true
    code-tools: true
    code-overflow: wrap
---

## Monte Carlo Method

Monte Carlo (MC) methods in reinforcement learning are a set of techniques used to estimate the value functions and improve policies based on the average of complete returns (total rewards) from multiple episodes. In the context of a game like blackjack, Monte Carlo methods can be very effective for learning optimal strategies because it is an episodic game with clear beginnings and endings.

Monte Carlo methods can be categorized into two main types based on the relationship between the policy used to generate behavior (the behavior policy) and the policy being improved (the target policy): on-policy and off-policy methods.

### MC (On-Policy)

On-policy methods involve learning about and improving the same policy that is used to make decisions and generate data. Essentially, the policy used to interact with the environment is the same policy that is evaluated and improved based on the gathered data.

::: panel-tabset

#### Value Function

![Figure 1-1-1: This figure shows the estimated value for player hands without a usable ace across different dealer showing cards. The x-axis represents the dealer's card showing, ranging from 2 to 10. The y-axis represents the player's total hand value, ranging from about 5 to 20. The z-axis shows the estimated value of each state. Higher values (in red) indicate more favorable situations for the player, while lower values (in blue) indicate less favorable situations. Notably, the values decrease sharply as the player's hand approaches and exceeds 17, reflecting increased risk of busting.](pictures/mc_on_value_1.png)

![Figure 1-1-2: This figure shows the estimated value for player hands with a usable ace. The figure again indicates that higher hand values near 21 yield higher estimated values, demonstrating the strategic benefit of having a flexible ace.](pictures/mc_on_value_2.png)

Both graphs effectively highlight how the value of a blackjack hand changes depending on the player's total and the dealer's up-card, and how having a usable ace increases the player's advantage due to the flexibility it provides in hand values. This is because the ace can be valued as 1 or 11, giving the player greater flexibility to avoid busting and improve their hand.

#### Optimal Policy

![Figure 1-2: This figure shows the optimal policy for playing blackjack as derived from on-policy Monte Carlo simulations, categorized by whether the player's hand includes a usable ace or not. Each chart illustrates recommended actions (hit or stick) for various combinations of the dealer's showing card and the player's hand total.](pictures/mc_on_policy.png)

#### Average Payoff

![Figure 1-3: This figure shows a series of vertical fluctuations in payouts across the 1000 players. The fluctuations vary around the negative payout zone, confirming that most players end up with a loss on average.](pictures/mc_on_payoff.png)

The average payout of -0.04703 after 1000 rounds based on the optimal policy from Monte Carlo (MC) on-policy simulations in blackjack suggests that, although the policy is optimized to increase the player's chances of winning, it does not eliminate the inherent house edge present in the game. This negative average payout indicates that the player is expected to lose approximately 4.7 cents for every dollar bet over a large number of rounds, highlighting the challenge of overcoming the casino's advantage even with strategic play.

:::

### MC (Off-Policy)

Off-policy methods use a different approach by learning about a target policy (the policy of interest) based on the behavior generated by another policy (the behavior policy). This separation allows the agent to learn from exploratory or even random actions that are not necessarily part of the optimal strategy.

::: panel-tabset

#### Optimal Policy

![Figure 2-1: This figure shows the optimal policy for playing blackjack using off-policy Monte Carlo methods.](pictures/mc_off_policy.png)

#### Average Payoff

![Figure 2-2: This figure shows a series of vertical fluctuations in payouts across the 1000 players.](pictures/mc_off_payoff.png)

The average payout of -0.08581 after 1000 rounds based on the optimal policy from Monte Carlo (MC) off-policy simulations in blackjack indicates that, while the policy aims to optimize outcomes based on a separate exploratory policy, it still results in a net loss for the player. This larger average loss compared to the on-policy simulations (-0.08581 vs. -0.04703) suggests that the off-policy method might be either less efficient in exploiting the nuances of the game or may involve more risk due to the nature of the behavior policy used in its learning process.

:::


## Temporal Difference Learning Method

Temporal Difference (TD) Learning is a central method in reinforcement learning that combines ideas from Monte Carlo methods and dynamic programming. Unlike Monte Carlo methods, which wait until the end of an episode to update value estimates, TD learning updates estimates incrementally at each step of an episode. This allows TD learning to be used even in non-terminating (continuous) environments. TD methods bootstrap, which means they update value estimates based on other estimated values rather than waiting for a final outcome.

### SARSA (On-Policy TD Learning)

SARSA, which stands for State-Action-Reward-State-Action, is an on-policy TD learning algorithm. It updates the action-value function based on the action taken by the current policy, hence being described as on-policy. This method focuses on evaluating and improving the policy that is used to make decisions, with the learning directly influenced by the actions taken according to the policy.

::: panel-tabset

#### Optimal Policy

![Figure 3-1: This figure shows the optimal policy for playing blackjack using SARSA methods.](pictures/sarsa_policy.png)

#### Average Payoff

![Figure 3-2: This figure shows a series of vertical fluctuations in payouts across the 1000 players.](pictures/sarsa_payoff.png)

The average payout after 1000 rounds based on the optimal policy from SARSA in blackjack is -0.17661.

:::

### Q-Learning (Off-Policy TD Learning)

Q-learning is an off-policy TD learning algorithm and one of the most popular methods in reinforcement learning. It aims to find the optimal policy even when actions are taken according to an exploratory or different behavior policy.

::: panel-tabset

#### Optimal Policy

![Figure 4-1: This figure shows the optimal policy for playing blackjack using Q-learning methods.](pictures/qlearning_policy.png)

#### Average Payoff

![Figure 4-2: This figure shows a series of vertical fluctuations in payouts across the 1000 players.](pictures/qlearning_payoff.png)

The average payout after 1000 rounds based on the optimal policy from Q-Learning in blackjack is -0.14613.

:::


## Deep Q-Learning Method

Deep Q-Learning is an advanced reinforcement learning technique that combines Q-learning, a model-free reinforcement learning algorithm, with deep neural networks. This approach is used to learn the optimal action-selection policy for a given task by using a neural network as a function approximator.

In our Deep Q-Network (DQN) configuration for Blackjack, we employ a discount factor of 0.99, which sufficiently prioritizes future rewards while ensuring that immediate outcomes remain influential in decision-making. This is appropriate given that Blackjack games generally reach a conclusion after a few moves. After experimenting with various learning rates, we opted for a rate of 0.0001. This rate struck a balance between efficient learning and stability; lower rates such as 0.00001 and 0.000001 resulted in excessively slow training progress, even in relatively small networks. The training regimen involved 500,000 episodes to robustly optimize its decision-making capabilities.

::: panel-tabset

#### Training Process

![Figure 5-1: This figure shows the evolution of the loss during the training of the Deep Q-Network over 500,000 episodes.](pictures/training_loss.png)

#### Optimal Policy

![Figure 5-2: This figure shows the optimal policy for playing blackjack using DQN methods.](pictures/dqn_policy.png)

#### Average Payoff

![Figure 5-3: This figure shows a series of vertical fluctuations in payouts across the 1000 players.](pictures/dqn_payoff.png)

The average payout after 1000 rounds based on the optimal policy from Q-Learning in blackjack is -0.05446.

:::